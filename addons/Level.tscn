[gd_scene load_steps=39 format=2]

[ext_resource path="res://TerrainData/data.hterrain" type="Resource" id=1]
[ext_resource path="res://addons/zylann.hterrain/hterrain.gd" type="Script" id=2]
[ext_resource path="res://addons/zylann.hterrain/hterrain_texture_set.gd" type="Script" id=3]
[ext_resource path="res://Textures/TerrainTextures/Level_slot2_normal_roughness.packed_tex" type="Texture" id=4]
[ext_resource path="res://Textures/TerrainTextures/Level_slot3_normal_roughness.packed_tex" type="Texture" id=5]
[ext_resource path="res://Textures/TerrainTextures/Level_slot0_normal_roughness.packed_tex" type="Texture" id=6]
[ext_resource path="res://Textures/TerrainTextures/Level_slot1_normal_roughness.packed_tex" type="Texture" id=7]
[ext_resource path="res://Textures/TerrainTextures/Level_slot0_albedo_bump.packed_tex" type="Texture" id=8]
[ext_resource path="res://Textures/TerrainTextures/Level_slot1_albedo_bump.packed_tex" type="Texture" id=9]
[ext_resource path="res://Textures/TerrainTextures/Level_slot2_albedo_bump.packed_tex" type="Texture" id=10]
[ext_resource path="res://Textures/TerrainTextures/Level_slot3_albedo_bump.packed_tex" type="Texture" id=11]
[ext_resource path="res://addons/Camera.gd" type="Script" id=12]
[ext_resource path="res://Towers/Tower2.tscn" type="PackedScene" id=13]
[ext_resource path="res://Fonts/coolvetica rg.otf" type="DynamicFontData" id=14]
[ext_resource path="res://Control Assets/Item.tscn" type="PackedScene" id=15]
[ext_resource path="res://Materials/AllSkyFree_Sky_OvercastLow_Equirect.png" type="Texture" id=16]
[ext_resource path="res://Player/Player.tscn" type="PackedScene" id=17]
[ext_resource path="res://Meshes/MachineGun/machinegun.fbx" type="PackedScene" id=18]
[ext_resource path="res://addons/Level.gd" type="Script" id=19]
[ext_resource path="res://Meshes/SecondMachineGun/quit.fbx" type="PackedScene" id=20]
[ext_resource path="res://Meshes/Shotgun/shotgun.fbx" type="PackedScene" id=21]
[ext_resource path="res://Towers/SniperTower.tscn" type="PackedScene" id=22]
[ext_resource path="res://Towers/GatlingGun.tscn" type="PackedScene" id=23]
[ext_resource path="res://Control Assets/ToolTipDialogue.tscn" type="PackedScene" id=24]
[ext_resource path="res://Control Assets/Shop/Shop.tscn" type="PackedScene" id=25]
[ext_resource path="res://Towers/TeslaTower.tscn" type="PackedScene" id=26]

[sub_resource type="Shader" id=4]
code = "shader_type spatial;

// This is a shader with less textures, in case the main one doesn't run on your GPU.
// It's mostly a big copy/paste, because Godot doesn't support #include or #ifdef...

uniform sampler2D u_terrain_heightmap;
uniform sampler2D u_terrain_normalmap;
// I had to remove `hint_albedo` from colormap because it makes sRGB conversion kick in,
// which snowballs to black when doing GPU painting on that texture...
uniform sampler2D u_terrain_colormap;// : hint_albedo;
uniform sampler2D u_terrain_splatmap;
uniform mat4 u_terrain_inverse_transform;
uniform mat3 u_terrain_normal_basis;

uniform sampler2D u_ground_albedo_bump_0 : hint_albedo;
uniform sampler2D u_ground_albedo_bump_1 : hint_albedo;
uniform sampler2D u_ground_albedo_bump_2 : hint_albedo;
uniform sampler2D u_ground_albedo_bump_3 : hint_albedo;

uniform float u_ground_uv_scale = 20.0;
uniform bool u_depth_blending = true;
uniform bool u_triplanar = false;
// Each component corresponds to a ground texture. Set greater than zero to enable.
uniform vec4 u_tile_reduction = vec4(0.0, 0.0, 0.0, 0.0);

varying vec4 v_tint;
varying vec4 v_splat;
varying vec3 v_ground_uv;


vec3 unpack_normal(vec4 rgba) {
	vec3 n = rgba.xzy * 2.0 - vec3(1.0);
	// Had to negate Z because it comes from Y in the normal map,
	// and OpenGL-style normal maps are Y-up.
	n.z *= -1.0;
	return n;
}

// Blends weights according to the bump of detail textures,
// so for example it allows to have sand fill the gaps between pebbles
vec4 get_depth_blended_weights(vec4 splat, vec4 bumps) {
	float dh = 0.2;

	vec4 h = bumps + splat;
	
	// TODO Keep improving multilayer blending, there are still some edge cases...
	// Mitigation: nullify layers with near-zero splat
	h *= smoothstep(0, 0.05, splat);
	
	vec4 d = h + dh;
	d.r -= max(h.g, max(h.b, h.a));
	d.g -= max(h.r, max(h.b, h.a));
	d.b -= max(h.g, max(h.r, h.a));
	d.a -= max(h.g, max(h.b, h.r));
	
	return clamp(d, 0, 1);
}

vec3 get_triplanar_blend(vec3 world_normal) {
	vec3 blending = abs(world_normal);
	blending = normalize(max(blending, vec3(0.00001))); // Force weights to sum to 1.0
	float b = blending.x + blending.y + blending.z;
	return blending / vec3(b, b, b);
}

vec4 texture_triplanar(sampler2D tex, vec3 world_pos, vec3 blend) {
	vec4 xaxis = texture(tex, world_pos.yz);
	vec4 yaxis = texture(tex, world_pos.xz);
	vec4 zaxis = texture(tex, world_pos.xy);
	// blend the results of the 3 planar projections.
	return xaxis * blend.x + yaxis * blend.y + zaxis * blend.z;
}

vec4 depth_blend2(vec4 a, vec4 b, float t) {
	// https://www.gamasutra.com
	// /blogs/AndreyMishkinis/20130716/196339/Advanced_Terrain_Texture_Splatting.php
	float d = 0.1;
	float ma = max(a.a + (1.0 - t), b.a + t) - d;
	float ba = max(a.a + (1.0 - t) - ma, 0.0);
	float bb = max(b.a + t - ma, 0.0);
	return (a * ba + b * bb) / (ba + bb);
}

vec4 texture_antitile(sampler2D tex, vec2 uv) {
	float frequency = 2.0;
	float scale = 1.3;
	float sharpness = 0.7;
	
	// Rotate and scale UV
	float rot = 3.14 * 0.6;
	float cosa = cos(rot);
	float sina = sin(rot);
	vec2 uv2 = vec2(cosa * uv.x - sina * uv.y, sina * uv.x + cosa * uv.y) * scale;
	
	vec4 col0 = texture(tex, uv);
	vec4 col1 = texture(tex, uv2);
	//col0 = vec4(0.0, 0.0, 1.0, 1.0);
	// Periodically alternate between the two versions using a warped checker pattern
	float t = 0.5 + 0.5 
		* sin(uv2.x * frequency + sin(uv.x) * 2.0) 
		* cos(uv2.y * frequency + sin(uv.y) * 2.0);
	// Using depth blend because classic alpha blending smoothes out details
	return depth_blend2(col0, col1, smoothstep(0.5 * sharpness, 1.0 - 0.5 * sharpness, t));
}

void vertex() {
	vec2 cell_coords = (u_terrain_inverse_transform * WORLD_MATRIX * vec4(VERTEX, 1)).xz;
	// Must add a half-offset so that we sample the center of pixels,
	// otherwise bilinear filtering of the textures will give us mixed results.
	cell_coords += vec2(0.5);

	// Normalized UV
	UV = cell_coords / vec2(textureSize(u_terrain_heightmap, 0));
	
	// Height displacement
	float h = texture(u_terrain_heightmap, UV).r;
	VERTEX.y = h;

	v_ground_uv = vec3(cell_coords.x, h * WORLD_MATRIX[1][1], cell_coords.y) / u_ground_uv_scale;
	
	// Putting this in vertex saves 2 fetches from the fragment shader,
	// which is good for performance at a negligible quality cost,
	// provided that geometry is a regular grid that decimates with LOD.
	// (downside is LOD will also decimate tint and splat, but it's not bad overall)
	v_tint = texture(u_terrain_colormap, UV);
	v_splat = texture(u_terrain_splatmap, UV);
	
	// Need to use u_terrain_normal_basis to handle scaling.
	NORMAL = u_terrain_normal_basis * unpack_normal(texture(u_terrain_normalmap, UV));
}

void fragment() {
	if (v_tint.a < 0.5) {
		// TODO Add option to use vertex discarding instead, using NaNs
		discard;
	}
	
	vec3 terrain_normal_world = 
		u_terrain_normal_basis * unpack_normal(texture(u_terrain_normalmap, UV));
	terrain_normal_world = normalize(terrain_normal_world);

	// TODO Detail should only be rasterized on nearby chunks (needs proximity management to switch shaders)
	
	vec2 ground_uv = v_ground_uv.xz;
	
	vec4 ab0, ab1, ab2, ab3;
	if (u_triplanar) {
		// Only do triplanar on one texture slot,
		// because otherwise it would be very expensive and cost many more ifs.
		// I chose the last slot because first slot is the default on new splatmaps,
		// and that's a feature used for cliffs, which are usually designed later.

		vec3 blending = get_triplanar_blend(terrain_normal_world);

		ab3 = texture_triplanar(u_ground_albedo_bump_3, v_ground_uv, blending);

	} else {
		if (u_tile_reduction[3] > 0.0) {
			ab3 = texture(u_ground_albedo_bump_3, ground_uv);
		} else {
			ab3 = texture_antitile(u_ground_albedo_bump_3, ground_uv);
		}
	}
	
	if (u_tile_reduction[0] > 0.0) {
		ab0 = texture_antitile(u_ground_albedo_bump_0, ground_uv);
	} else {
		ab0 = texture(u_ground_albedo_bump_0, ground_uv);
	}
	if (u_tile_reduction[1] > 0.0) {
		ab1 = texture_antitile(u_ground_albedo_bump_1, ground_uv);
	} else {
		ab1 = texture(u_ground_albedo_bump_1, ground_uv);
	}
	if (u_tile_reduction[2] > 0.0) {
		ab2 = texture_antitile(u_ground_albedo_bump_2, ground_uv);
	} else {
		ab2 = texture(u_ground_albedo_bump_2, ground_uv);
	}
	
	vec3 col0 = ab0.rgb;
	vec3 col1 = ab1.rgb;
	vec3 col2 = ab2.rgb;
	vec3 col3 = ab3.rgb;
	
	vec4 w;
	// TODO An #ifdef macro would be nice! Or copy/paste everything in a different shader...
	if (u_depth_blending) {
		w = get_depth_blended_weights(v_splat, vec4(ab0.a, ab1.a, ab2.a, ab3.a));
	} else {
		w = v_splat.rgba;
	}
	
	float w_sum = (w.r + w.g + w.b + w.a);
	
	ALBEDO = v_tint.rgb * (
		w.r * col0.rgb + 
		w.g * col1.rgb + 
		w.b * col2.rgb + 
		w.a * col3.rgb) / w_sum;
	
	ROUGHNESS = 1.0;
	
	NORMAL = (INV_CAMERA_MATRIX * (vec4(terrain_normal_world, 0.0))).xyz;

	//ALBEDO = w.rgb;
	//ALBEDO = v_ground_uv.xyz;
}

"

[sub_resource type="Resource" id=1]
script = ExtResource( 3 )
mode = 0
textures = [ [ ExtResource( 8 ), ExtResource( 9 ), ExtResource( 10 ), ExtResource( 11 ) ], [ ExtResource( 6 ), ExtResource( 7 ), ExtResource( 4 ), ExtResource( 5 ) ] ]

[sub_resource type="BoxShape" id=7]

[sub_resource type="PanoramaSky" id=6]
panorama = ExtResource( 16 )

[sub_resource type="Environment" id=3]
background_mode = 2
background_sky = SubResource( 6 )
background_energy = 0.17
ambient_light_color = Color( 0.305882, 0, 0, 1 )
ambient_light_energy = 0.0
fog_color = Color( 0.101961, 0, 0, 1 )
fog_sun_color = Color( 0.172549, 0.0784314, 0.0784314, 1 )
fog_depth_end = 600.0
fog_height_enabled = true
fog_height_min = 9.6
fog_height_max = 38.1
tonemap_mode = 3
ssao_enabled = true
ssao_color = Color( 0.588235, 0.588235, 0.588235, 1 )
glow_intensity = 0.0
adjustment_brightness = 0.89
adjustment_saturation = 3.78

[sub_resource type="CapsuleMesh" id=8]

[sub_resource type="CapsuleMesh" id=9]

[sub_resource type="CapsuleMesh" id=10]

[sub_resource type="CapsuleMesh" id=11]

[sub_resource type="Curve3D" id=12]
_data = {
"points": PoolVector3Array( 0, 0, 0, 0, 0, 0, 66.5029, 83.9967, 973.084, 0, 0, 0, 0, 0, 0, 66.5029, 83.9967, 973.084, 0, 0, 0, 0, 0, 0, 71.1025, 84.622, 80.7597, 0, 0, 0, 0, 0, 0, 985.725, 91.264, 51.3384, 0, 0, 0, 0, 0, 0, 998.758, 106.277, 966.503, 0, 0, 0, 0, 0, 0, 66.5029, 83.9967, 973.084 ),
"tilts": PoolRealArray( 0, 0, 0, 0, 0, 0 )
}

[sub_resource type="DynamicFont" id=13]
size = 32
font_data = ExtResource( 14 )

[sub_resource type="DynamicFont" id=14]
size = 32
font_data = ExtResource( 14 )

[node name="Spatial" type="Spatial"]
script = ExtResource( 19 )

[node name="Terrain" type="Spatial" parent="."]
transform = Transform( 1.25, 0, 0, 0, 1, 0, 0, 0, 1.25, 0, 0, -200 )
script = ExtResource( 2 )
ambient_wind = 0.265
lod_scale = 2.0
_terrain_data = ExtResource( 1 )
chunk_size = 32
collision_enabled = true
collision_layer = 257
collision_mask = 1
shader_type = "Classic4Lite"
custom_shader = SubResource( 4 )
custom_globalmap_shader = null
texture_set = SubResource( 1 )
render_layers = 1
shader_params/u_ground_uv_scale = 20
shader_params/u_depth_blending = true
shader_params/u_triplanar = false
shader_params/u_tile_reduction = Plane( 0, 0, 0, 0 )

[node name="Ground" type="KinematicBody" parent="Terrain"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 463, 2, 671 )
collision_layer = 257

[node name="GroundShape" type="CollisionShape" parent="Terrain/Ground"]
transform = Transform( 300, 0, 0, 0, 1, 0, 0, 0, 300, 40, 0, 0 )
shape = SubResource( 7 )

[node name="Sun" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, -12.0323, 3.47433, 10.7361 )
light_color = Color( 0.466667, 0.0862745, 0, 1 )
light_energy = 0.555

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 3 )

[node name="Player" parent="." instance=ExtResource( 17 )]
transform = Transform( 1.5, 0, 0, 0, 2, 0, 0, 0, 1.5, 602.273, 4.68693, 652.584 )
collision_layer = 257
collision_mask = 257

[node name="CameraPivot" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 0.906308, -0.422618, 0, 0.422618, 0.906308, 700, 0, 675 )

[node name="Camera" type="Camera" parent="CameraPivot"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 800, 0 )
current = true
fov = 17.3
far = 1193.0
script = ExtResource( 12 )
itemTemplate = ExtResource( 15 )

[node name="Timers" type="Node" parent="."]

[node name="ZombieTimer" type="Timer" parent="Timers"]
wait_time = 0.2

[node name="Cylinders" type="Spatial" parent="."]
visible = false

[node name="Cylinder" type="MeshInstance" parent="Cylinders"]
transform = Transform( 2, 0, 0, 0, 2, 0, 0, 0, 2, 987, 85, 975 )
mesh = SubResource( 8 )

[node name="Cylinder2" type="MeshInstance" parent="Cylinders"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 987, 85, 72 )
mesh = SubResource( 9 )

[node name="Cylinder3" type="MeshInstance" parent="Cylinders"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 70, 85, 975 )
mesh = SubResource( 10 )

[node name="Cylinder4" type="MeshInstance" parent="Cylinders"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 70, 85, 72 )
mesh = SubResource( 11 )

[node name="Spawn_points" type="Path" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.115, 50, 10.579 )
curve = SubResource( 12 )

[node name="Spawn_location" type="PathFollow" parent="Spawn_points"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 66.5029, 83.9967, 973.084 )

[node name="machinegun2" parent="." instance=ExtResource( 18 )]
transform = Transform( 0.4, 0, 0, 0, 0.4, 0, 0, 0, 0.4, 483.654, 12.3009, 623.908 )
visible = false

[node name="Cube" parent="machinegun2/RootNode" index="0"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 18.2716, -19.5167, 0 )

[node name="BuildOverlay" type="CanvasLayer" parent="."]
layer = -1

[node name="MarginContainer" type="MarginContainer" parent="BuildOverlay"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 25.0
margin_top = 25.0
margin_right = -25.0

[node name="VBoxContainer" type="VBoxContainer" parent="BuildOverlay/MarginContainer"]
margin_right = 974.0
margin_bottom = 575.0

[node name="GoldLabel" type="Label" parent="BuildOverlay/MarginContainer/VBoxContainer"]
margin_right = 974.0
margin_bottom = 39.0
grow_horizontal = 0
size_flags_vertical = 0
custom_fonts/font = SubResource( 13 )
text = "Gold: 0"
align = 2
valign = 3

[node name="InventoryButton2" type="Button" parent="BuildOverlay/MarginContainer/VBoxContainer"]
light_mask = 31
margin_left = 773.0
margin_top = 43.0
margin_right = 974.0
margin_bottom = 88.0
size_flags_horizontal = 8
custom_fonts/font = SubResource( 14 )
text = "Inventory [ E ]"
align = 2

[node name="ShopButton" type="Button" parent="BuildOverlay/MarginContainer/VBoxContainer"]
margin_left = 845.0
margin_top = 92.0
margin_right = 974.0
margin_bottom = 137.0
size_flags_horizontal = 8
custom_fonts/font = SubResource( 14 )
text = "Shop [Q]"

[node name="CenterContainer" type="CenterContainer" parent="BuildOverlay/MarginContainer"]
visible = false
margin_right = 974.0
margin_bottom = 575.0
mouse_filter = 2

[node name="ColorRect" type="ColorRect" parent="BuildOverlay/MarginContainer/CenterContainer"]
margin_left = 37.0
margin_top = 137.0
margin_right = 937.0
margin_bottom = 437.0
rect_min_size = Vector2( 900, 300 )
color = Color( 0.482353, 0.482353, 0.482353, 1 )

[node name="ItemHolder" type="GridContainer" parent="BuildOverlay/MarginContainer/CenterContainer"]
margin_left = 37.0
margin_top = 137.0
margin_right = 937.0
margin_bottom = 437.0
rect_min_size = Vector2( 900, 300 )
size_flags_horizontal = 0
size_flags_vertical = 0
custom_constants/vseparation = 25
custom_constants/hseparation = 25
columns = 4

[node name="RelicLayer" type="CanvasLayer" parent="."]
visible = false

[node name="MarginContainer" type="MarginContainer" parent="RelicLayer"]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="ToolTipDialogue" parent="RelicLayer/MarginContainer" instance=ExtResource( 24 )]
anchor_right = 0.0
anchor_bottom = 0.0
margin_right = 1024.0
margin_bottom = 600.0

[node name="CenterContainer" type="CenterContainer" parent="RelicLayer/MarginContainer"]
margin_right = 1024.0
margin_bottom = 600.0

[node name="HBoxContainer" type="HBoxContainer" parent="RelicLayer/MarginContainer/CenterContainer"]
margin_left = 512.0
margin_top = 300.0
margin_right = 512.0
margin_bottom = 300.0
custom_constants/separation = 150

[node name="quit" parent="." instance=ExtResource( 20 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 520.945, 19.4004, 570.652 )
visible = false

[node name="Cube001" parent="quit/RootNode" index="1"]
transform = Transform( 0.240647, 0, 0, 0, 0.240647, 0, 0, 0, 0.240647, -2.07434, 0, 0 )

[node name="Added Towers" type="Spatial" parent="."]

[node name="SniperTower" parent="Added Towers" instance=ExtResource( 22 )]
transform = Transform( 4, 0, 0, 0, 4, 0, 0, 0, 4, 600, 0, 700 )

[node name="Tower" parent="Added Towers" instance=ExtResource( 13 )]
transform = Transform( 4, 0, 0, 0, 4, 0, 0, 0, 4, 550, 0, 680 )

[node name="Tower2" parent="Added Towers" instance=ExtResource( 13 )]
transform = Transform( 4, 0, 0, 0, 4, 0, 0, 0, 4, 600, 0, 750 )

[node name="shotgun" parent="Added Towers" instance=ExtResource( 21 )]
transform = Transform( 10.366, 0, 0, 0, 10.0194, 2.65809, 0, -2.65809, 10.0194, 527.492, 19.3123, 774.762 )

[node name="Tower3" parent="Added Towers" instance=ExtResource( 13 )]
transform = Transform( 4, 0, 0, 0, 4, 0, 0, 0, 4, 604.528, 0, 600 )

[node name="GatlingGun" parent="Added Towers" instance=ExtResource( 23 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 530, 0, 605 )

[node name="TeslaTower" parent="Added Towers" instance=ExtResource( 26 )]
transform = Transform( 4, 0, 0, 0, 4, 0, 0, 0, 4, 586.858, 0, 522.222 )

[node name="ShopLayer" type="CanvasLayer" parent="."]
layer = 2

[node name="Shop" parent="ShopLayer" instance=ExtResource( 25 )]
visible = false

[node name="SpotLight" type="SpotLight" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 680.804, 208.575, 672.332 )
spot_range = 375.506

[connection signal="timeout" from="Timers/ZombieTimer" to="." method="_on_ZombieTimer_timeout"]
[connection signal="pressed" from="BuildOverlay/MarginContainer/VBoxContainer/InventoryButton2" to="CameraPivot/Camera" method="_on_InventoryButton_pressed"]
[connection signal="pressed" from="BuildOverlay/MarginContainer/VBoxContainer/ShopButton" to="CameraPivot/Camera" method="_on_ShopButton_pressed"]

[editable path="machinegun2"]
[editable path="quit"]
